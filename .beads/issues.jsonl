{"id":"task-1","title":"Fix command injection vulnerability in updateVersionFile","description":"The updateVersionFile function uses exec.Command with unsanitized user input (filePath), creating a command injection security vulnerability. This allows potential execution of arbitrary commands through malicious file paths.","acceptance_criteria":"Function validates and sanitizes filePath parameter before use\nFunction uses go-git library instead of exec commands for Git operations\nFunction rejects paths containing shell metacharacters or path traversal attempts\nUnit tests verify rejection of malicious file paths","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:24.2771-05:00","updated_at":"2025-10-24T19:36:09.989273-05:00","closed_at":"2025-10-24T19:36:09.989273-05:00","labels":["critical","security"]}
{"id":"task-10","title":"Refactor CLI to separate business logic","description":"The CLI commands directly call core library functions, making testing difficult and violating separation of concerns. Business logic should be separated from CLI presentation layer.","acceptance_criteria":"Business logic extracted into separate service layer\nCLI handlers only handle parsing and presentation\nService layer is independently testable\nCode maintains backward compatibility","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:11.169187-05:00","updated_at":"2025-10-24T19:37:11.169187-05:00","labels":["architecture","refactoring"]}
{"id":"task-11","title":"Implement proper semantic version comparison","description":"The current version sorting logic uses string comparison for pre-release suffixes, which doesn't follow SemVer specification. This can lead to incorrect version ordering when pre-release identifiers contain mixed alphanumeric content.","design":"1. Research SemVer 2.0 specification for pre-release comparison rules\n2. Analyze current compareSuffixes function to identify non-compliant behavior\n3. Implement proper pre-release identifier parsing and comparison logic\n4. Create comprehensive test suite covering SemVer edge cases\n5. Update existing version comparison functions to use new SemVer logic\n6. Run regression tests to ensure backward compatibility\n7. Document the SemVer compliance improvements","acceptance_criteria":"Version comparison follows SemVer 2.0 specification exactly\nPre-release versions are sorted correctly (alpha \u003c beta \u003c rc)\nNumeric identifiers in pre-release are compared numerically\nComprehensive test suite validates SemVer compliance with edge cases","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-24T19:36:22.067819-05:00","updated_at":"2025-10-24T20:25:56.196799-05:00","closed_at":"2025-10-24T20:25:56.196799-05:00","labels":["enhancement","semver"]}
{"id":"task-12","title":"Add concurrency testing for git operations","description":"The new git locking mechanism needs comprehensive testing to verify it properly handles concurrent operations and prevents race conditions.","acceptance_criteria":"Tests verify concurrent bump operations don't corrupt repository\nLock timeout and stale lock detection are tested\nTests cover multiple processes accessing same repository\nRace detector passes on all concurrent tests","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:11.266429-05:00","updated_at":"2025-10-24T19:37:11.266429-05:00","labels":["concurrency","testing"]}
{"id":"task-13","title":"Upgrade Go version to 1.25.0 to resolve build toolchain mismatch","description":"Current build fails due to Go toolchain version mismatch. The code requires Go 1.25.0 but the environment has Go 1.24.6, causing build failures.","acceptance_criteria":"go.mod specifies go 1.25.0\nBuild completes successfully with Go 1.25.0\nCI/CD pipeline updated to use Go 1.25.0\nAll tests pass with new Go version","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-24T19:35:47.041661-05:00","updated_at":"2025-10-24T19:36:10.935727-05:00","closed_at":"2025-10-24T19:36:10.935727-05:00","labels":["build","toolchain"]}
{"id":"task-14","title":"Create comprehensive API documentation for core bump package","description":"Create detailed API documentation for the core bump package to help developers understand and contribute to the codebase. This will improve maintainability and make it easier for new contributors to understand the internal APIs.","acceptance_criteria":"Package-level documentation added with overview and examples\nAll public functions and types have comprehensive godoc comments\nCode examples demonstrate key functionality\nDocumentation follows Go documentation conventions\nDocumentation is accessible via go doc command","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:11.361805-05:00","updated_at":"2025-10-24T19:37:11.361805-05:00","labels":["documentation"]}
{"id":"task-15","title":"Create comprehensive user guide with examples and workflows","description":"Develop a detailed user guide that covers common workflows, use cases, and best practices for using the bump tool.","acceptance_criteria":"User guide covers common workflows and use cases\nExamples demonstrate best practices\nGuide includes troubleshooting section\nDocumentation is easy to navigate and search","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:11.455643-05:00","updated_at":"2025-10-24T19:37:11.455643-05:00","labels":["documentation"]}
{"id":"task-16","title":"Create contributing guidelines and development setup documentation","description":"Establish clear contributing guidelines and development setup instructions to make it easy for new contributors to get started.","acceptance_criteria":"Contributing guidelines document all contribution requirements\nDevelopment setup instructions are clear and complete\nCode of conduct is established\nPR and issue templates are created","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:11.54994-05:00","updated_at":"2025-10-24T19:37:11.54994-05:00","labels":["community","documentation"]}
{"id":"task-17","title":"Add support for additional version schemes beyond semantic versioning","description":"Extend the tool to support alternative versioning schemes like Calendar Versioning (CalVer) and build numbers to make it more versatile for different project types.","acceptance_criteria":"CalVer (Calendar Versioning) format support implemented\nBuild number versioning support added\nVersion scheme can be configured per repository\nExisting semantic versioning functionality remains unchanged\nVersion format validation works for all supported schemes\nDocumentation updated with examples for each scheme","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-24T19:37:11.647267-05:00","updated_at":"2025-10-24T19:37:11.647267-05:00","labels":["enhancement","feature"]}
{"id":"task-18","title":"Implement configuration file support for bump settings","description":"Add support for a configuration file (.bumprc, bump.yaml, or similar) to allow per-repository customization of bump behavior without command-line flags.","acceptance_criteria":"Configuration file format is defined and documented\nTool reads and validates configuration on startup\nConfig file supports all relevant settings (push, prefix, etc.)\nCommand-line flags override config file settings\nError messages guide users when config is invalid","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-24T19:37:11.746269-05:00","updated_at":"2025-10-24T19:37:11.746269-05:00","labels":["config","feature"]}
{"id":"task-19","title":"Add shell completion support for bash, zsh, and fish","description":"Implement shell completion scripts to improve user experience and discoverability of commands and flags.","acceptance_criteria":"Bash completion script works for commands and flags\nZsh completion script works for commands and flags\nFish completion script works for commands and flags\nInstallation instructions included in documentation\nCompletions suggest valid values where applicable","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-24T19:37:11.846234-05:00","updated_at":"2025-10-24T19:37:11.846234-05:00","labels":["feature","ux"]}
{"id":"task-2","title":"Fix git config manipulation security vulnerability","description":"The SetDefaultPushPreference and GetDefaultPushPreference functions directly manipulate .git/config without proper validation or atomic operations, potentially corrupting git configuration or allowing unauthorized config modifications.","acceptance_criteria":"Config operations validate section and key names before modification\nConfig updates use atomic writes to prevent corruption\nFunction rejects attempts to modify non-bump config sections\nError handling properly reports configuration validation failures","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:24.420628-05:00","updated_at":"2025-10-24T19:36:10.135125-05:00","closed_at":"2025-10-24T19:36:10.135125-05:00","labels":["critical","security"]}
{"id":"task-20","title":"Implement integration testing with real git repositories","description":"Create comprehensive integration tests that work with real git repositories to verify end-to-end functionality and catch issues that unit tests might miss.","acceptance_criteria":"Integration tests use temporary real git repositories\nTests cover complete workflows from tag creation to push\nTests verify interaction with remote repositories\nTests clean up temporary resources properly\nTests run in CI/CD pipeline","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-24T19:37:11.94306-05:00","updated_at":"2025-10-24T19:37:11.94306-05:00","labels":["integration","testing"]}
{"id":"task-21","title":"Create performance benchmarking for large git repositories","description":"Develop performance benchmarks to ensure the tool performs well with repositories containing thousands of tags and commits.","acceptance_criteria":"Benchmark suite tests performance with 1000+ tags\nBenchmarks measure tag parsing, sorting, and creation\nPerformance regression tests added to CI\nBenchmark results are documented for baseline comparison","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:12.03995-05:00","updated_at":"2025-10-24T19:37:12.03995-05:00","labels":["performance","testing"]}
{"id":"task-3","title":"Implement git operation concurrency protection","description":"Git operations (createTag and pushTag) lack proper locking mechanisms, creating race conditions when multiple bump processes run simultaneously. This can lead to corrupted tags or failed operations.","acceptance_criteria":"File-based locking mechanism prevents concurrent git operations\nLock is automatically released on process termination or failure\nOperations fail gracefully when unable to acquire lock within timeout\nUnit tests verify proper locking behavior under concurrent access","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:24.601636-05:00","updated_at":"2025-10-24T19:36:10.311489-05:00","closed_at":"2025-10-24T19:36:10.311489-05:00","labels":["concurrency","security"]}
{"id":"task-4","title":"Fix reversed HasPrefix arguments in tag filtering","description":"The tag filtering logic has reversed arguments to strings.HasPrefix, causing incorrect tag filtering behavior and potentially including unwanted tags in version calculations.","acceptance_criteria":"HasPrefix arguments are corrected to (tag, prefix) order\nTag filtering works correctly for version prefixes\nUnit tests verify correct tag filtering with various prefix patterns\nExisting functionality is preserved for non-prefixed tags","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:24.767288-05:00","updated_at":"2025-10-24T19:36:10.472393-05:00","closed_at":"2025-10-24T19:36:10.472393-05:00","labels":["bug","high-priority"]}
{"id":"task-5","title":"Add path traversal protection for file updates","description":"The updateVersionFile function lacks comprehensive path traversal protection, allowing potential access to files outside the repository through crafted relative paths.","acceptance_criteria":"Function validates all file paths stay within repository boundaries\nRelative paths are resolved and validated before use\nPath traversal attempts (../, symlinks) are detected and rejected\nUnit tests verify protection against various path traversal techniques","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:46.648179-05:00","updated_at":"2025-10-24T19:36:10.568495-05:00","closed_at":"2025-10-24T19:36:10.568495-05:00","labels":["high-priority","security"]}
{"id":"task-6","title":"Fix resource leak in ReferenceIter usage","description":"The GetVersionTags function doesn't properly close ReferenceIter, causing resource leaks when processing tags. This can lead to file handle exhaustion in repositories with many tags or during repeated operations.","acceptance_criteria":"ReferenceIter is properly closed using defer after creation\nResource cleanup occurs even when errors happen during iteration\nUnit tests verify no resource leaks under normal and error conditions\nCode follows Go best practices for iterator resource management","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:46.743951-05:00","updated_at":"2025-10-24T19:36:10.661789-05:00","closed_at":"2025-10-24T19:36:10.661789-05:00","labels":["bug","high-priority","resource-leak"]}
{"id":"task-7","title":"Fix ambiguous config preference return values","description":"The GetDefaultPushPreference function returns false for both 'explicit false' and 'unset' preference states, making it impossible to distinguish between a user who explicitly disabled push and a user who never set a preference.","acceptance_criteria":"Function signature changed to return (bool, bool) for value and existence\nCallers can distinguish between unset preference and explicit false\nCLI behavior respects the distinction appropriately\nUnit tests verify all three states: true, false, and unset","status":"closed","priority":3,"issue_type":"bug","created_at":"2025-10-24T19:35:46.836725-05:00","updated_at":"2025-10-24T19:36:10.755135-05:00","closed_at":"2025-10-24T19:36:10.755135-05:00","labels":["bug","config","high-priority"]}
{"id":"task-8","title":"Improve test coverage for error scenarios","description":"Current test coverage is 71.3% with missing coverage for error handling paths, edge cases, and integration scenarios. Critical error paths and failure modes need comprehensive test coverage.","acceptance_criteria":"Test coverage reaches minimum 85% overall\nAll error handling paths have corresponding test cases\nEdge cases (empty repos, malformed tags, network failures) are tested\nIntegration tests cover end-to-end workflows with mocked dependencies","notes":"PR created: https://github.com/klauern/bump/pull/37 - Improved test coverage from 61.6% to 80.2% overall, with bump.go at 85.4% coverage","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-24T19:37:11.072305-05:00","updated_at":"2025-10-24T20:09:35.591769-05:00","closed_at":"2025-10-24T20:09:35.591769-05:00","labels":["quality","testing"]}
{"id":"task-9","title":"Remove duplicate test task definition in Taskfile.yml","description":"The Taskfile.yml contains duplicate test task definitions which can cause confusion and inconsistent test execution behavior.","acceptance_criteria":"Only one test task definition exists in Taskfile.yml\nTest task includes both coverage report and profile generation\nTask execution produces consistent results","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-24T19:35:46.938022-05:00","updated_at":"2025-10-24T19:36:10.845989-05:00","closed_at":"2025-10-24T19:36:10.845989-05:00","labels":["cleanup","config"]}
